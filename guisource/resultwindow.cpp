#include "headers/resultwindow.h"
#include "headers/configwindow.h"
#include "headers/submitwindow.h"
#include "headers/notstandarderror.h"
#include "sysinfo/cpuinfo.h"

#include "ui_resultwindow.h"

#include <QString>
#include <iostream>
#include <QVariant>
#include <QFileDialog>
#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
#include <cstdio>

/* parameterized constructor generated by qt creator */
ResultWindow::ResultWindow(bool standard_flag, bool ocflag, std::vector<double> results, const QStringList& names, QWidget *parent) :
    QMainWindow(parent), ui(new Ui::ResultWindow)
{
    this->standard_flag = standard_flag;
    this->ocflag = ocflag;
    this->results = results;
    this->names = names;
    ui->setupUi(this);
}

/* destructor generated by qt creator */
ResultWindow::~ResultWindow()
{
    delete ui;
}
/* method to convert time to score */
double ResultWindow::convertTimeToScore(double time) {
    time/= 1E9;
    totalTime +=time;
    double score = (.001/time)*10000000;
    totalScore +=score;
    return score;
}
/* iterate through vectors and put results in table */
void ResultWindow::displayResults() {
    QStringList table_list;

    table_list << "Algorithm" << "Time" << "Score";

    ui->result_table->setColumnCount(3);
    ui->result_table->setHorizontalHeaderLabels(table_list);


    int row = 0;

    foreach(const QString str, names) {
        ui->result_table->insertRow(row);
        QTableWidgetItem *newItem = ui->result_table->item(row,0);

        if(!newItem) {
            newItem = new QTableWidgetItem;
            ui->result_table->setItem(row,0,newItem);
        }
        newItem->setText(str);
        newItem->setFlags(newItem->flags() ^ Qt::ItemIsEditable);
        newItem->setTextAlignment( Qt::AlignCenter);

        row++;
    }
    row = 0;
    for(unsigned int i = 0; i < results.size(); i++) {
        QTableWidgetItem *newItem = ui->result_table->item(row,1);
        QTableWidgetItem *newScore = ui->result_table->item(row,2);

        if(!newItem) {
            newItem = new QTableWidgetItem;
            ui->result_table->setItem(row,1,newItem);
        }
        if(!newScore) {
            newScore = new QTableWidgetItem;
            ui->result_table->setItem(row,2,newScore);
        }
        newItem->setData(Qt::DisplayRole, QVariant(results[i]/1E9));
        newItem->setFlags(newItem->flags() ^ Qt::ItemIsEditable);
        newItem->setTextAlignment( Qt::AlignCenter);

        double score = convertTimeToScore(results[i]);

        newScore->setData(Qt::DisplayRole, QVariant(score));
        newScore->setFlags(newScore->flags() ^ Qt::ItemIsEditable);
        newScore->setTextAlignment( Qt::AlignCenter);

        row++;
    }
    QString total = "Totals:";
    ui->result_table->insertRow(row);
    QTableWidgetItem *totalStr = ui->result_table->item(row,0);
    QTableWidgetItem *totTime = ui->result_table->item(row,1);
    QTableWidgetItem *totScore = ui->result_table->item(row,2);

    if(!totalStr) {
        totalStr = new QTableWidgetItem;
        ui->result_table->setItem(row, 0, totalStr);
    }
    if(!totTime) {
        totTime = new QTableWidgetItem;
        ui->result_table->setItem(row, 1, totTime);
    }
    if(!totScore) {
        totScore = new QTableWidgetItem;
        ui->result_table->setItem(row, 2, totScore);
    }
    totalStr->setText(total);
    totalStr->setFlags(totalStr->flags() ^ Qt::ItemIsEditable);
    totalStr->setTextAlignment( Qt::AlignCenter);

    totTime->setData(Qt::DisplayRole, QVariant(totalTime));
    totTime->setFlags(totTime->flags() ^ Qt::ItemIsEditable);
    totTime->setTextAlignment( Qt::AlignCenter);

    totScore->setData(Qt::DisplayRole, QVariant(totalScore));
    totScore->setFlags(totScore->flags() ^ Qt::ItemIsEditable);
    totScore->setTextAlignment( Qt::AlignCenter);

    ui->result_table->resizeColumnsToContents();
    getCpuInfo();
}

void ResultWindow::getCpuInfo() {
  CPUInfo cpu;

  sys_info.push_back(cpu.vendor());
  sys_info.push_back(cpu.model());
  sys_info.push_back(cpu.speed());
  sys_info.push_back(cpu.frequencies());
  sys_info.push_back(cpu.threads());
  sys_info.push_back(cpu.byte_ordering());
  sys_info.push_back(cpu.physical_mem());
  sys_info.push_back(cpu.virtual_mem());
  sys_info.push_back(cpu.swap_mem());

  for(int i = 0; i < sys_info.size(); i++) {
    if((sys_info[i].find('\n') != string::npos))
      sys_info[i].erase(sys_info[i].find(EOF));
  }

  ui->vendor_val->setText(QString::fromStdString(sys_info[0]));
  ui->model_val->setText(QString::fromStdString(sys_info[1]));
  ui->speed_val->setText(QString::fromStdString(sys_info[2]));
  ui->freq_val->setText(QString::fromStdString(sys_info[3]));
  ui->thread_val->setText(QString::fromStdString(sys_info[4]));
  ui->byte_order_val->setText(QString::fromStdString(sys_info[5]));
  ui->phy_mem_val->setText(QString::fromStdString(sys_info[6]));
  ui->virt_mem_val->setText(QString::fromStdString(sys_info[7]));
  ui->swap_mem_val->setText(QString::fromStdString(sys_info[8]));
}


/* quit function */
void ResultWindow::quit() {
    this->close();
}
/* button slot calls quit */
void ResultWindow::on_quit_button_clicked()
{
    quit();
}
/* quits the result window and runs a new config window */
void ResultWindow::on_reset_button_clicked()
{
    quit();
    ConfigWindow * configWindow = new ConfigWindow();
    configWindow->show();
}
/* opens a file save dialog,  generates a csv string, saves to file */
void ResultWindow::on_save_result_button_clicked()
{
     QString fileName = QFileDialog::getSaveFileName(this, tr("Save File"), ".csv");
     QFile f(fileName);
     f.open(QIODevice::WriteOnly);
     char comma[] = ",";
     char end[] = ",\n";
     char headers[] = "Algorithm,Time,Score,\n";
     f.write(headers);
     for(int i = 0; i < names.length(); ++i) {
        f.write(ui->result_table->item(i,0)->text().toLocal8Bit());
        f.write(comma);
        f.write(ui->result_table->item(i,1)->text().toLocal8Bit());
        f.write(comma);
        f.write(ui->result_table->item(i,2)->text().toLocal8Bit());
        f.write(end);
     }
     f.close();
}
/* desc: Manually generate a json string for submission
   ret: void
   param: none
   error_handling:
     check standard flag: Executes NotStandardError dialog
*/
void ResultWindow::on_submit_button_clicked()
{
    if(standard_flag) {
        //start json string manually
        std::string json_str = "{ ";

        for(int i = 0; i < names.length(); i++) {
            json_str.append("\"" + names[i].toLocal8Bit() + "Time\" : ");
            json_str.append(std::to_string(results[static_cast<unsigned long>(i)]) + ", ");
            json_str.append("\"" + names[i].toLocal8Bit() + "Score\" : " + ui->result_table->item(i,2)->text().toLocal8Bit() + ", ");
        }

        json_str.append("\"totalTime\" : " + std::to_string(totalTime) + ", ");
        json_str.append("\"totalScore\" : " + std::to_string(totalScore) + ", ");

        if(ocflag)
          json_str.append("\"overclocked\" : true");
        else
          json_str.append("\"overclocked\" : false");

        for(unsigned int i = 0; i < sys_info.size(); i++) {
          //create tmp string to strip unexpected characters ie \0 EOF from string
          string tmp_info = sys_info[i];
          tmp_info.erase(std::remove(tmp_info.begin(), tmp_info.end(), '\0'), tmp_info.end());
          json_str.append(", \"" + sys_info_labels[i] + "\" : \"" + tmp_info + "\" ");
        }
        json_str.append(" }");
        std::cout << json_str;
        SubmitWindow submitWindow(json_str);
        submitWindow.exec();
    }
    else {
        NotStandardError notStandardDialog;
        notStandardDialog.exec();
    }
}
